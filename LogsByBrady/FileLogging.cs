using System.Reflection;

namespace logs_by_brady
{
    public class FileLogging : IBradysLogger
    {
        static string loggingDir = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
        ILogger logger = new Logger();
        string path = Path.Combine(loggingDir, $"{Assembly.GetCallingAssembly().GetName().Name}-{DateTime.Now.ToString("yyyy-MM-dd")}.txt");

        public FileLogging() 
        {
            if(!File.Exists(path))
            {
                File.Create(path).Close();
                File.AppendAllText(path, "Logs automatically generated by LogsByBrady: https://github.com/bradyscode" + Environment.NewLine);
            }
        }
        public ILogger Critical(string message)
        {
            logger.Log("critical", message);
            File.AppendAllText(path, logger.Message + Environment.NewLine);
            return logger;
        }

        public ILogger Debug(string message)
        {
            logger.Log("debug", message);
            File.AppendAllText(path, logger.Message + Environment.NewLine);
            return logger;
        }

        public ILogger Error(string message)
        {
            logger.Log("Error", message);
            File.AppendAllText(path, logger.Message + Environment.NewLine);
            return logger;
        }

        public ILogger Exception(string message)
        {
            logger.Log("Exception", message);
            File.AppendAllText(path, logger.Message + Environment.NewLine);
            return logger;
        }

        public ILogger Info(string message)
        {
            logger.Log("info", message);
            File.AppendAllText(path, logger.Message + Environment.NewLine);
            return logger;
        }

        public ILogger Notice(string message)
        {
            logger.Log("notice", message);
            File.AppendAllText(path, logger.Message + Environment.NewLine);
            return logger;
        }

        public ILogger Success(string message)
        {
            logger.Log("success", message);
            File.AppendAllText(path, logger.Message + Environment.NewLine);
            return logger;
        }

        public ILogger Trace(string message)
        {
            logger.Log("trace", message);
            File.AppendAllText(path, logger.Message + Environment.NewLine);
            return logger;
        }

        public ILogger Warning(string message)
        {
            logger.Log("warning", message);
            File.AppendAllText(path, logger.Message + Environment.NewLine);
            return logger;
        }
    }
}